import{_ as t,M as p,p as e,q as o,R as s,t as n,N as c,V as l,a1 as i}from"./framework-5866ffd3.js";const u={},r={id:"接着-static-assert看一遍uart-c的代码-未完成",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#接着-static-assert看一遍uart-c的代码-未完成","aria-hidden":"true"},"#",-1),d=i(`<h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token class-name">gpio_id_t</span> tx<span class="token punctuation">,</span> rx<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fn<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_config_t</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uart_t</span> <span class="token operator">*</span>uart_base<span class="token punctuation">,</span> <span class="token operator">*</span>uart<span class="token punctuation">;</span>
    <span class="token class-name">uart_config_t</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span> module <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span>uart_base <span class="token operator">=</span> UART_BASE<span class="token punctuation">,</span>
             <span class="token punctuation">.</span>uart <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// will be set in uart_init</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义了一个全局变量 <code>module</code></li><li><code>volatile</code> 告诉程序在用这个变量的时候总是从对应地址中读取，而不使用缓存。常用在驱动代码中。</li></ul><h2 id="uart-reinit-custom" tabindex="-1"><a class="header-anchor" href="#uart-reinit-custom" aria-hidden="true">#</a> uart_reinit_custom</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">uart_reinit_custom</span><span class="token punctuation">(</span><span class="token keyword">int</span> uart_id<span class="token punctuation">,</span> <span class="token class-name">gpio_id_t</span> tx<span class="token punctuation">,</span> <span class="token class-name">gpio_id_t</span> rx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio_fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 设置使用哪个UART，指定GPIO端口，</span>
    module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>index <span class="token operator">=</span> uart_id<span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>tx <span class="token operator">=</span> tx<span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rx <span class="token operator">=</span> rx<span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>fn <span class="token operator">=</span> gpio_fn<span class="token punctuation">;</span> <span class="token comment">// ？？</span>
    module<span class="token punctuation">.</span>uart <span class="token operator">=</span> module<span class="token punctuation">.</span>uart_base <span class="token operator">+</span> module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>index<span class="token punctuation">;</span>

    <span class="token comment">// clock up peripheral</span>
    <span class="token comment">// gating bits [0:5], reset bits [16:21]</span>
    <span class="token comment">// \`CCU_UART_BGR_REG\` 地址 \`0x090C\`</span>
    <span class="token comment">// \`0x90C\` 寄存器 0-5位代表控制 UART0-5 的时钟控制，置1为打开时钟</span>
    <span class="token comment">// \`0x90C\` 寄存器 16-21 位代表控制 UART0-5 的复位，置1为解除reset状态</span>
    <span class="token class-name">uint32_t</span> bit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> reset <span class="token operator">=</span> bit <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token function">ccu_enable_bus_clk</span><span class="token punctuation">(</span>CCU_UART_BGR_REG<span class="token punctuation">,</span> bit<span class="token punctuation">,</span> reset<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// configure GPIOs</span>
    <span class="token comment">// 使能两个GPIO口，TODO 不理解为什么要pullup，为什么要用 GPIO_FN_ALT6</span>
    <span class="token function">gpio_set_function</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>tx<span class="token punctuation">,</span> module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_set_pullup</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_set_function</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rx<span class="token punctuation">,</span> module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_set_pullup</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// configure baud rate</span>
    <span class="token class-name">uint32_t</span> baud <span class="token operator">=</span> <span class="token number">115200</span><span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>fcr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// enable TX/RX fifo，UART FIFO Control Register</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>halt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// temporarily disable TX transfer，UART Halt TX Register</span>

    <span class="token class-name">uint32_t</span> sys_clock_rate <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> udiv <span class="token operator">=</span> sys_clock_rate <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> baud<span class="token punctuation">)</span><span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>lcr <span class="token operator">|=</span> LCR_DLAB<span class="token punctuation">;</span>  <span class="token comment">// set DLAB = 1 to access DLL/DLH, UART Line Control Register</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>dll <span class="token operator">=</span> udiv <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token comment">// low byte of divisor -&gt; DLL, UART Divisor Latch Low Register</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>dlh <span class="token operator">=</span> <span class="token punctuation">(</span>udiv <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token comment">// hi byte of divisor -&gt; DLH, UART Divisor Latch High Register</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>lcr <span class="token operator">&amp;=</span> <span class="token operator">~</span>LCR_DLAB<span class="token punctuation">;</span> <span class="token comment">// set DLAB = 0 to access RBR/THR</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>halt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// re-enable TX transfer</span>

    <span class="token comment">// configure data-parity-stop (low 4 bits of LCR)</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token number">0</span>b11<span class="token punctuation">;</span>    <span class="token comment">// 8 data</span>
    <span class="token class-name">uint8_t</span> parity <span class="token operator">=</span> <span class="token number">0</span>b0<span class="token punctuation">;</span>   <span class="token comment">// no parity</span>
    <span class="token class-name">uint8_t</span> stop <span class="token operator">=</span> <span class="token number">0</span>b0<span class="token punctuation">;</span>     <span class="token comment">// 1 stop</span>
    <span class="token class-name">uint8_t</span> settings <span class="token operator">=</span> <span class="token punctuation">(</span>parity <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>stop <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>usr <span class="token operator">&amp;</span> USR_BUSY<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// wait until uart not busy</span>
    <span class="token comment">// clear low 4 bits, replace with settings 8-n-1</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>lcr <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>lcr <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0</span>b1111<span class="token punctuation">)</span> <span class="token operator">|</span> settings<span class="token punctuation">;</span>

    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>mcr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// disable modem control</span>
    module<span class="token punctuation">.</span>uart<span class="token operator">-&gt;</span>regs<span class="token punctuation">.</span>ier <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// disable interrupts by default</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="confirm-uart-initalized" tabindex="-1"><a class="header-anchor" href="#confirm-uart-initalized" aria-hidden="true">#</a> confirm_uart_initalized</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">confirm_uart_initialized</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fn_name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 函数的参数是\`函数名\`</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>uart <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fn_name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果全局变量\`module.uart\`不为空，且参数函数名为空，则抛出错误</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;uart_init() must be called only once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>uart <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fn_name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果全局变量\`module.uart\`为空，且参数函数不为空，代表还没有调用\`uart_init\`</span>
        <span class="token comment">// if uart_init has not been called, there is no serial connection to read/write</span>
        <span class="token comment">// All calls to uart operations are dead ends (that means no printf/assert!)</span>
        <span class="token comment">// Force a call to uart_init here to enable reporting of problem</span>
        <span class="token comment">// (otherwise lack of output is ultra mysterious)</span>
        <span class="token function">uart_reinit_custom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> GPIO_PB8<span class="token punctuation">,</span> GPIO_PB9<span class="token punctuation">,</span> GPIO_FN_ALT6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;uart_init() must be called before using %s()&quot;</span><span class="token punctuation">,</span> fn_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uart-reinit-custom-1" tabindex="-1"><a class="header-anchor" href="#uart-reinit-custom-1" aria-hidden="true">#</a> uart_reinit_custom</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">uart_reinit_custom</span><span class="token punctuation">(</span><span class="token keyword">int</span> uart_id<span class="token punctuation">,</span> <span class="token class-name">gpio_id_t</span> tx<span class="token punctuation">,</span> <span class="token class-name">gpio_id_t</span> rx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> gpio_fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>uart<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// shut down previous if active</span>
        <span class="token function">uart_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_function</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>tx<span class="token punctuation">,</span> GPIO_FN_DISABLED<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// disconnect gpio</span>
        <span class="token function">gpio_set_pullnone</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_function</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rx<span class="token punctuation">,</span> GPIO_FN_DISABLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_pullnone</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        module<span class="token punctuation">.</span>uart <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果激活过uart，做以下操作把它关闭掉</li><li><code>uart_flush()</code>:</li></ul>`,10);function m(v,b){const a=p("RouterLink");return e(),o("div",null,[s("h1",r,[k,n(" 接着"),c(a,{to:"/cs107e/static-assert.html"},{default:l(()=>[n("_Static_assert")]),_:1}),n("看一遍uart.c的代码（未完成）")]),d])}const g=t(u,[["render",m],["__file","uart_c.html.vue"]]);export{g as default};
